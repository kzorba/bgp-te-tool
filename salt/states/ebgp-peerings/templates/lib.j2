{#
Author: Kostas Zorbadelos (kzorba@nixly.net)

eBGP Peering configuration for JunOS - supporting library

-#}}

{%- import "ebgp-peerings/templates/config.j2" as conf -%}

{% macro test_macro(aDict) %}
    This is output from test_macro!

    {{ aDict }}
{%- endmacro %}

{% macro gen_junos_ebgp_groups(bgp_peerings={}, policies=[], location='') %}
    {#-
    Generate junos bgp groups configuration under protocols | bgp hierarchy

    Args:
    bgp_peerings (in): a dictionary that contains the necessary information
    of all eBGP peerings for a router. It is generated by
    an external Salt pillar script that fetches relevant information from
    peering-manager. It is the dictionary contained under bgp | direct-peerings
    or bgp | internet-exchange-peerings in the pillar from peering-manager.

    policies (out): a list of records (dictionaries) containing the BGP out
    policies. Each record contains the policy name, address family, peer asn,
    relationship type and location. This list is returned from the macro and
    is used to generate the actual junos policy configuration, using large
    communities.

    This macro generates the junos configuration of all the eBGP peerings,
    based on information contained in peering-manager exposed in Salt as a
    dictionary from an external pillar.
    -#}
    {%- if bgp_peerings %}
        {%- for pg in bgp_peerings %}
group {{ pg['group'] }} {
    type external;
            {%- for p in pg['peerings'] %}
                {%- if not p['is_enabled'] %}
    inactive: neighbor {{ p['neighbor'] }} {
                {%- else %}
    neighbor {{ p['neighbor'] }} {
                {%- endif %}
        peer-as {{ p['peer_asn'] }};
        description "{{ p['description'] }}";
                {%- if p['local_address'] %}
        local-address {{ p['local_address'] }};
                {%- endif %}
                {%- if (p['multihop_ttl'] > 1) %}
        multihop {
            ttl {{ p['multihop_ttl'] }};
        }
                {%- endif %}
                {%- if p['max_prefixes'] > 0 %}
        family {{ p['family'] }} {
            unicast {
                prefix-limit {
                    maximum {{ p['max_prefixes'] }};
                    teardown 90;
                }
            }
        }
               	{%- else %}
        family {{ p['family'] }} {
            unicast;
        }
                {%- endif %}
                {%- if p['password'] %}
        authentication-key "{{ p['password'] }}";
                {%- endif %}
                {%- if p['import_policy'] %}
        import {{ p['import_policy'] }};
                {%- else %}
        import DENY_ALL;
                {%- endif %}
                {%- if p['export_policy'] %}
        export {{ p['export_policy'] }};
                    {%- set policy_rec = { 'name': p['export_policy'], 'family': p['family'], 'peer_asn': p['peer_asn'], 'relationship': p['relationship'], 'location': location } %}
                    {%- do policies.append(policy_rec) %}
                {%- else %}
        export DENY_ALL;
                {%- endif %}
    }
            {%- endfor %}
}
        {%- endfor %}
    {%- endif -%}
{% endmacro %}


{% macro gen_junos_common_ebgp_out_policy_options() %}
    {#-
    Generate the common parts of junos ebgp out configuration under policy-options hierarchy

    Args:
    None

    This macro generates the common configuration used by the other OUT BGP policies.
    It contains policy statements checking invalid announcements, plus common
    (large) BGP communities.
    #}
policy-statement DENY_ALL {
    term DEFAULT {
        then reject;
    }
}

policy-statement INVALID-ANNOUNCEMENTS-V4 {
    term OUR_AS_RANGES {
        from {
    {%- for r in conf.v4_allocations %}
            route-filter {{ r }} orlonger;
    {%- endfor %}
        }
        then reject;
    }
    term OUR_CUSTOMERS {
        from {
            family inet;
            as-path-group TRANSIT_CUSTOMERS;
        }
        then reject;
    }
    term rest {
        then accept;
    }
}

policy-statement INVALID-ANNOUNCEMENTS-V6 {
    term OUR_AS_RANGES {
        from {
    {%- for r in conf.v6_allocations %}
            route-filter {{ r }} orlonger;
    {%- endfor %}
        }
        then reject;
    }
    term OUR_CUSTOMERS {
        from {
            family inet6;
            as-path-group TRANSIT_CUSTOMERS;
        }
        then reject;
    }
    term rest {
        then accept;
    }
}
{# Our transit customers #}
as-path-group TRANSIT_CUSTOMERS {
    as-path 1 "^({{ conf.transit_customers_asns|join('|') }}).*";
}
{# Common communities #}
community RT_ANY members target:*:*;
community AS{{ conf.local_asn }}_LARGE_ANY members large:{{ conf.local_asn }}:*:*;
community RTBH-AS{{ conf.local_asn }} members {{ conf.local_asn }}:666;
community ROUTE_NO_ANNOUNCE_ANY_PEER members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:40:0 ];
community CUSTOMER_ROUTE_NO_ANNOUNCE_ANY_PEER members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:40:0 ];
community ROUTE_NO_ANNOUNCE_ANY_LOCATION members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:400:0 ];
community CUSTOMER_ROUTE_NO_ANNOUNCE_ANY_LOCATION members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:400:0 ];
community ROUTE_ANNOUNCEMENT members large:{{ conf.local_asn }}:3:1999;
community CUSTOMER_ROUTE_ANNOUNCEMENT members large:{{ conf.local_asn }}:3:200;
{%- endmacro %}


{% macro gen_junos_ebgp_out_policy(p) %}
    {#-
    Generate a junos ebgp out policy configuration.

    Args:
    p: a dictionary (record) containing a BGP policy's information. It contains
    the policy's name, family, peer_asn, relationship type and location of the
    router.

    This macro generates a BGP out policy as a policy statement. The policy logic
    is that prefixes are announced based on the communities that are attached to
    them. A safety net is also in place to avoid invalid announcements. Finally
    a custom policy can be written and included in the out policy in case we need
    to do entirely custom stuff in a peering.
    #}
policy-statement {{ p['name'] }} {
    term PREVENT_INVALID_ANNOUNCEMENTS {
        from {
    {%- if p['family'] == "inet" %}
            policy INVALID-ANNOUNCEMENTS-V4;
    {%- else %}
            policy INVALID-ANNOUNCEMENTS-V6;
    {%- endif %}
        }
        then reject;
    }
    term CLEAN_RT {
        then {
            community delete RT_ANY;
            next term;
        }
    }
    {%- if salt['cp.stat_file']("salt://ebgp-peerings/templates/"~p['name']~".j2") %}
    term CUSTOM {
        from {
            policy CUSTOM-{{ p['name'] }};
        }
        then accept;
    }
    {%- endif %}
    {%- if p['relationship'] == "transit-provider" %}
    term RTBH {
        from community RTBH-AS{{ conf.local_asn }};
        then {
            community set RTBH-AS{{ p['peer_asn'] }};
            accept;
        }
    }
    {%- endif  %}
    term ROUTE_DO_NOT_ANNOUNCE_PEER {
        from {
            family {{ p['family'] }};
            community [ ROUTE_NO_ANNOUNCE_ANY_PEER CUSTOMER_ROUTE_NO_ANNOUNCE_ANY_PEER ROUTE_NO_ANNOUNCE_AS{{ p['peer_asn'] }} CUSTOMER_ROUTE_NO_ANNOUNCE_AS{{ p['peer_asn'] }} ];
            }
        then reject;
    }
    term ROUTE_ANNOUNCE_PEER {
        from {
            family {{ p['family'] }};
            community [ ROUTE_ANNOUNCE_AS{{ p['peer_asn'] }} CUSTOMER_ROUTE_ANNOUNCE_AS{{ p['peer_asn'] }} ];
        }
        then {
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_PREPENDx1_PEER {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx1_AS{{ p['peer_asn'] }} CUSTOMER_ROUTE_PREPENDx1_AS{{ p['peer_asn'] }} ];
        }
        then {
            as-path-prepend {{ conf.local_asn }};
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_PREPENDx2_PEER {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx2_AS{{ p['peer_asn'] }} CUSTOMER_ROUTE_PREPENDx2_AS{{ p['peer_asn'] }} ];
        }
        then {
            as-path-prepend "{{ conf.local_asn }} {{ conf.local_asn }}";
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_PREPENDx3_PEER {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx3_AS{{ p['peer_asn'] }} CUSTOMER_ROUTE_PREPENDx3_AS{{ p['peer_asn'] }} ];
        }
        then {
            as-path-prepend "{{ conf.local_asn }} {{ conf.local_asn }} {{ conf.local_asn }}";
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_DO_NOT_ANNOUNCE_LOCATION {
        from {
            family {{ p['family'] }};
            community [ ROUTE_NO_ANNOUNCE_ANY_LOCATION CUSTOMER_ROUTE_NO_ANNOUNCE_ANY_LOCATION ROUTE_NO_ANNOUNCE_{{ p['location'] }} CUSTOMER_ROUTE_NO_ANNOUNCE_{{ p['location'] }} ];
        }
        then reject;
    }
    term ROUTE_PREPENDx1_LOCATION {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx1_{{ p['location'] }} CUSTOMER_ROUTE_PREPENDx1_{{ p['location'] }} ];
        }
        then {
            as-path-prepend {{ conf.local_asn }};
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_PREPENDx2_LOCATION {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx2_{{ p['location'] }} CUSTOMER_ROUTE_PREPENDx2_{{ p['location'] }} ];
        }
        then {
            as-path-prepend "{{ conf.local_asn }} {{ conf.local_asn }}";
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_PREPENDx3_LOCATION {
        from {
            family {{ p['family'] }};
            community [ ROUTE_PREPENDx3_{{ p['location'] }} CUSTOMER_ROUTE_PREPENDx3_{{ p['location'] }} ];
        }
        then {
            as-path-prepend "{{ conf.local_asn }} {{ conf.local_asn }} {{ conf.local_asn }}";
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term ROUTE_ANNOUNCE {
        from {
            family {{ p['family'] }};
            community [ ROUTE_ANNOUNCEMENT CUSTOMER_ROUTE_ANNOUNCEMENT ];
        }
        then {
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term LEGACY_ANNOUNCEMENT_CUSTOMER {
        from {
            family {{ p['family'] }};
            as-path-group TRANSIT_CUSTOMERS;
        }
        then {
            community delete AS{{ conf.local_asn }}_LARGE_ANY;
            accept;
        }
    }
    term DEFAULT {
        then reject;
    }
}
    {% if salt['cp.stat_file']("salt://ebgp-peerings/templates/"~p['name']~".j2") %}
{% include "ebgp-peerings/templates/"~p['name']~".j2" %}
    {%- endif  %}
{%- endmacro %}


{% macro gen_junos_ebgp_out_policy_communities(p) -%}
    {#-
    Generate communities for a junos ebgp out policy.

    Args:
    p: a dictionary (record) containing an eBGP policy's information. It contains
    the policy's name, family, peer_asn, relationship type and location of the
    router.

    This macro generates the communities configuration supporting the eBGP-out
    policy. It contains large communities for the various actions (announce,
    no announce, prepend in peer or location), plus the blackhole community
    if applicable (in transit providers)
    -#}
    {%- if p['relationship'] == "transit-provider" %}
        {%- if conf.transit_blackhole_communities[p['peer_asn']] is defined %}
community RTBH-AS{{ p['peer_asn'] }} members {{ conf.transit_blackhole_communities[p['peer_asn']] }};
        {%- else %}
community RTBH-AS{{ p['peer_asn'] }} members {{ p['peer_asn']}}:666;
        {%- endif %}
    {%- endif %}
community ROUTE_NO_ANNOUNCE_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:40:{{ p['peer_asn']}} ];
community CUSTOMER_ROUTE_NO_ANNOUNCE_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:40:{{ p['peer_asn']}} ];
community ROUTE_ANNOUNCE_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:41:{{ p['peer_asn']}} ];
community CUSTOMER_ROUTE_ANNOUNCE_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:41:{{ p['peer_asn']}} ];
community ROUTE_PREPENDx1_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:61:{{ p['peer_asn']}} ];
community CUSTOMER_ROUTE_PREPENDx1_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:61:{{ p['peer_asn']}} ];
community ROUTE_PREPENDx2_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:62:{{ p['peer_asn']}} ];
community CUSTOMER_ROUTE_PREPENDx2_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:62:{{ p['peer_asn']}} ];
community ROUTE_PREPENDx3_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:63:{{ p['peer_asn']}} ];
community CUSTOMER_ROUTE_PREPENDx3_AS{{ p['peer_asn'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:63:{{ p['peer_asn']}} ];
community ROUTE_NO_ANNOUNCE_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:400:{{ conf.geolocations[p['location']] }} ];
community CUSTOMER_ROUTE_NO_ANNOUNCE_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:400:{{ conf.geolocations[p['location']] }} ];
community ROUTE_PREPENDx1_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:601:{{ conf.geolocations[p['location']] }} ];
community CUSTOMER_ROUTE_PREPENDx1_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:601:{{ conf.geolocations[p['location']] }} ];
community ROUTE_PREPENDx2_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:602:{{ conf.geolocations[p['location']] }} ];
community CUSTOMER_ROUTE_PREPENDx2_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:602:{{ conf.geolocations[p['location']] }} ];
community ROUTE_PREPENDx3_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:1999 large:{{ conf.local_asn }}:603:{{ conf.geolocations[p['location']] }} ];
community CUSTOMER_ROUTE_PREPENDx3_{{ p['location'] }} members [ large:{{ conf.local_asn }}:3:200 large:{{ conf.local_asn }}:603:{{ conf.geolocations[p['location']] }} ];
{%- endmacro %}
